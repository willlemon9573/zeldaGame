using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using SprintZero1.Entities;
using System.Collections.Generic;

namespace SprintZero1.StatePatterns.PlayerStatePatterns
{
    internal class PlayerInvulnerabilityState : BasePlayerState
    {
        private const float LayerDepth = 0.1f; // the layer the draw link on
        private const float rotation = 0f; // rotation 
        private const float TotalInvulnTime = 3 / 4f; // max time to be invulnerable state is 3/4ths of a second
        private const float TimeToUpdate = 1 / 7f;
        private float _elapsedInvulnTime;
        private float _flashTime;
        private readonly List<Color> _colorList;

        private int _colorIndex;
        public PlayerInvulnerabilityState(PlayerEntity playerEntity) : base(playerEntity)
        {
            _colorList = new List<Color>()
            {
                 {Color.Red}, {Color.Snow},
            };
        }

        public override void Request()
        {
            _elapsedInvulnTime = 0f;
            _colorIndex = 0;
            _flashTime = 0f;
        }

        public override void Draw(SpriteBatch spriteBatch)
        {
            // sprite effect to flip if the player is moving left/right
            SpriteEffects spriteEffect = (_playerEntity.Direction == Enums.Direction.West) ? SpriteEffects.FlipHorizontally : SpriteEffects.None;
            _playerEntity.PlayerSprite.Draw(spriteBatch, _playerEntity.Position, _colorList[_colorIndex], spriteEffect, rotation, LayerDepth);
        }

        public override void Update(GameTime gameTime)
        {
            float deltaTime = (float)gameTime.ElapsedGameTime.TotalSeconds;
            _elapsedInvulnTime += deltaTime;
            _flashTime += deltaTime;

            if (_flashTime >= TimeToUpdate) // flash every update
            {
                _flashTime -= TimeToUpdate;
                _colorIndex = (_colorIndex + 1) % _colorList.Count;
            }

            if (_elapsedInvulnTime >= TotalInvulnTime) // change back to vulnerable state
            {
                _playerEntity.PlayerVulnerableState = new PlayerVulnerableState(_playerEntity);
                _playerEntity.PlayerVulnerableState.Request();
            }
        }
    }
}
